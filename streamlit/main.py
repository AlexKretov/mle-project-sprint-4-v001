# music_recommender_ultimate.py
import streamlit as st
import pandas as pd
import numpy as np
from catboost import CatBoostClassifier, Pool
from implicit.als import AlternatingLeastSquares
import json
from scipy.sparse import csr_matrix, save_npz, load_npz
import polars as pl
from collections import defaultdict
# ======================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ======================
st.set_page_config(
    page_title="MusicWizard üéß",
    page_icon="‚ú®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ======================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–•
# ======================
@st.cache_data
def preprocess_data(tracks):
    tracks['track_artist'] = tracks['track_name'] + " - " + tracks['artists']
    track_to_id = tracks.set_index('track_artist')['track_id'].astype(int).to_dict()
    track_id_to_info = tracks.set_index('track_id')[['track_name', 'artists']].to_dict(orient='index')
    return tracks, track_to_id, track_id_to_info

@st.cache_data
def load_data():
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    tracks = pd.read_parquet('../data/items.parquet', engine='pyarrow')
    similar = pd.read_parquet('../data/similar.parquet', engine='pyarrow')
    # –ó–∞–≥—Ä—É–∂–∞–µ–º csr_matrix –∏–∑ —Ñ–∞–π–ª–∞
    user_item_matrix_train = load_npz('../data/user_item_matrix_train.npz')
    
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    similar_map = (
        similar.sort_values(by='score', ascending=False)
        .groupby('item_id')['user_id']
        .agg(lambda x: list(x)[:10])  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
        .to_dict()
    )
    
    tracks, track_to_id, track_id_to_info = preprocess_data(tracks)
    tracks.set_index('track_id', inplace=True)
    return tracks, similar_map, track_to_id, track_id_to_info

@st.cache_resource
def load_model():
    als_model = AlternatingLeastSquares()
    als_model = als_model.load('../data/model.npz')
    return CatBoostClassifier().load_model('../catboost_model.cbm'), als_model

@st.cache_data(ttl=3600, show_spinner=False)
def get_instant_similar_tracks(user_input, similar_map):
    return list({
        similar_id 
        for track in user_input[-3:] 
        for similar_id in similar_map.get(track, [])[:10]
    })[:3]
def get_sexy_recommendations(history, tracks):
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤
    with open('../data/user_map.json') as f:
        user_map = json.load(f)
    with open('../data/track_map.json') as f:
        track_map = json.load(f)
    als_model = AlternatingLeastSquares()
    als_model = als_model.load('../data/model.npz')
    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    similar_users = find_similar_user(
        history,
        als_model,
        user_map,
        track_map,
        n_neighbors=1
    )
    user_item_matrix_train = load_npz('../data/user_item_matrix_train.npz')

    als_score = get_recommendations_als(user_item_matrix_train, als_model, similar_users[0][0], include_seen=False, n=10)
    events = pd.DataFrame(columns=['user_id', 'track_id'])
    events['user_id'] = [similar_users[0][0]] * len(als_score)
    events['track_id'] = als_score['track_id']
    factors = add_recommendation_features(events, tracks)
    factors['als_score'] = als_score['score']
    cb_model = CatBoostClassifier().load_model('../catboost_model.cbm')
    features = ['als_score', 'user_genre_affinity', 'user_artist_ratio']
    #target = 'target'
    inference_data = Pool(data=np.array(factors[features]))
    predictions = cb_model.predict_proba(inference_data)
    factors['cb_score']=predictions[:, 1]
    threshold = factors['cb_score'].nlargest(10).min()
    top_10 = factors[factors['cb_score'] >= threshold]['track_id'].to_list()
    return top_10

def add_recommendation_features(events, items):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç 2 –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:
    1. user_genre_affinity - –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∂–∞–Ω—Ä–∞
    2. user_artist_ratio - –¥–æ–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    events - DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['user_id', 'track_id']
    items - DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['track_id', 'artist', 'genre']
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame events —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    """
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö lookup-—Ç–∞–±–ª–∏—Ü
    print(items.columns)
    genre_lookup = items['genres'].to_dict()
    artist_lookup = items['track_artist'].to_dict()
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    user_stats = {
        'genres': defaultdict(lambda: defaultdict(int)),
        'track_artist': defaultdict(lambda: defaultdict(int)),
        'total': defaultdict(int)
    }
    
    # 3. –û–¥–Ω–æ–ø—Ä–æ—Ö–æ–¥–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    for _, row in events.iterrows():
        user_id = row['user_id']
        track_id = row['track_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        genre = genre_lookup.get(track_id)
        artist = artist_lookup.get(track_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if genre:
            user_stats['genres'][user_id][genre] += 1
        if artist:
            user_stats['track_artist'][user_id][artist] += 1
        
        user_stats['total'][user_id] += 1
    
    # 4. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    def calc_genre_affinity(row):
        user_id = row['user_id']
        track_id = row['track_id']
        genre = genre_lookup.get(track_id)
        
        if not genre or user_stats['total'][user_id] == 0:
            return 0.0
        return user_stats['genres'][user_id][genre] / user_stats['total'][user_id]
    
    def calc_artist_ratio(row):
        user_id = row['user_id']
        track_id = row['track_id']
        artist = artist_lookup.get(track_id)
        
        if not artist or user_stats['total'][user_id] == 0:
            return 0.0
        return user_stats['track_artist'][user_id][artist] / user_stats['total'][user_id]
    
    # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
    events = events.copy()
    events['user_genre_affinity'] = events.apply(calc_genre_affinity, axis=1)
    events['user_artist_ratio'] = events.apply(calc_artist_ratio, axis=1)
    
    return events

def find_similar_user(new_user_tracks, model, user_map, track_map, n_neighbors=5):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–ø-N –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    new_user_tracks - —Å–ø–∏—Å–æ–∫ track_id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model - –æ–±—É—á–µ–Ω–Ω–∞—è ALS –º–æ–¥–µ–ª—å
    user_map - —Å–ª–æ–≤–∞—Ä—å: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π user_id -> –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id
    track_map - —Å–ª–æ–≤–∞—Ä—å: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π track_id -> –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id
    n_neighbors - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π user_id, –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞)
    """
    # 1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    track_indices = [track_map[str(t)] for t in new_user_tracks if str(t) in track_map]
    #print(track_indices)
    if not track_indices:
        return []
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    item_embeddings = model.item_factors[track_indices]
    
    # 3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ)
    user_embedding = item_embeddings.mean(axis=0)
    
    # 4. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    user_embedding /= np.linalg.norm(user_embedding) + 1e-6
    
    # 5. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    similarities = model.user_factors.dot(user_embedding)
    
    # 6. –¢–æ–ø-N –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_indices = np.argpartition(similarities, -n_neighbors)[-n_neighbors:]
    top_indices = top_indices[np.argsort(-similarities[top_indices])]
    
    # 7. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º ID
    reverse_user_map = {v: k for k, v in user_map.items()}
    return [(reverse_user_map[i], similarities[i]) for i in top_indices if i in reverse_user_map]    
def get_recommendations_als(user_item_matrix, model, user_id, include_seen=True, n=5):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    with open('../data/user_map.json', 'r') as f:
        user_map = json.load(f)
    with open('../data/track_map.json', 'r') as f:
        track_map = json.load(f)
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π user_id
    user_id_enc = user_map[user_id]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è track_map
    inv_track_map = {v: int(k) for k, v in track_map.items()}
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –º–æ–¥–µ–ª–∏
    recommendations = model.recommend(
        user_id_enc, 
        user_item_matrix[user_id_enc], 
        filter_already_liked_items=not include_seen,
        N=n
    )
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ track_idx –∏ score
    track_indices = recommendations[0]
    scores = recommendations[1]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º track_idx –≤ track_id —Å –ø–æ–º–æ—â—å—é inv_track_map
    track_ids = np.array([inv_track_map.get(idx, -1) for idx in track_indices])
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame —Å –ø–æ–º–æ—â—å—é Polars
    recommendations_df = pl.DataFrame({
        "track_id": track_ids,
        "score": scores
    })
    
    return recommendations_df
# ======================
# –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
# ======================
def main():
    st.title('üéµ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä üéµ')
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ 10 —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è, –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
    tracks, similar_map, track_to_id, track_id_to_info = load_data()
    model, als_model = load_model()

    # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π state —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
    if 'history' not in st.session_state:
        st.session_state.history = []
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –¥–ª—è multiselect
    @st.cache_data
    def get_track_options():
        return list(track_to_id.keys())

    # –í–∏–¥–∂–µ—Ç –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–æ–≤
    st.subheader("1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏")
    selected_tracks = st.multiselect(
        "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
        options=get_track_options(),
        max_selections=10
    )

    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏") and len(selected_tracks) >= 5:
        # –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        selected_ids = [track_to_id[x] for x in selected_tracks]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏
        st.session_state.history = (st.session_state.history + selected_ids)[-100:]  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        with st.spinner('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...'):
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(selected_ids)} —Ç—Ä–µ–∫–æ–≤ –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é!")
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.subheader("2. –¢—Ä–µ–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à–∏ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö")
                similar_ids = get_instant_similar_tracks(st.session_state.history[-3:], similar_map)
                top_10 = get_sexy_recommendations(st.session_state.history, tracks)
                # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                similars  = [
                    f"- {track_id_to_info[id]['track_name']} - {track_id_to_info[id]['artists']}"
                    for id in similar_ids if id in track_id_to_info
                ]
                
                st.markdown("\n".join(similars))

                st.subheader("3. –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                model_rec = [
                    f"- {track_id_to_info[id]['track_name']} - {track_id_to_info[id]['artists']}"
                    for id in top_10 if id in track_id_to_info
                ]
                
                st.markdown("\n".join(model_rec))

if __name__ == "__main__":
    main()
